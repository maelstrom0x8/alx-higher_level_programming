#!/usr/bin/python3

""""""

import json, csv, turtle, tkinter
from typing import List


class Base:
    __nb_objects = 0

    def __init__(self, id=None):
        if id is not None:
            self.id = id
        else:
            Base.__nb_objects += 1
            self.id = Base.__nb_objects

    @staticmethod
    def to_json_string(list_dictionaries):
        if list_dictionaries is None or len(list_dictionaries) == 0:
            return '[]'
        else:
            return json.dumps(list_dictionaries)

    @classmethod
    def save_to_file(cls, list_objs: List['Base']):
        if list_objs is None or not isinstance(list_objs, list):
            res = None
        else:
            res = [x.to_dictionary() for x in list_objs]
        json_str = Base.to_json_string(res) if isinstance(res, list) else "[]"
        filename = ''.join([cls.__name__, '.json'])
        with open(file=filename, encoding='utf-8', mode='w') as file:
            file.write(json_str)

    @staticmethod
    def from_json_string(json_string: str):
        out = json.loads(json_string)

    @classmethod
    def create(cls, **dictionary):
        if cls.__name__ == "Rectangle":
            dummy = cls(1, 1)
        elif cls.__name__ == "Square":
            dummy = cls(1)
        else:
            dummy = cls()

        dummy.update(**dictionary)
        return dummy

    @classmethod
    def load_from_file(cls):
        filename = cls.__name__ + '.json'
        instances = []

        try:
            with open(filename, 'r', encoding='utf-8') as file:
                json_str = file.read()
                data = json.loads(json_str)
                for item in data:
                    instances.append(cls.create(**item))
        except FileNotFoundError:
            pass

        return instances

    @classmethod
    def save_to_file_csv(cls, list_objs):
        if list_objs is None or not isinstance(list_objs, list):
            res = []
        else:
            res = [obj.to_csv() for obj in list_objs]
        filename = ''.join([cls.__name__, '.csv'])
        with open(file=filename, encoding='utf-8', mode='w', newline='') as file:
            writer = csv.writer(file)
            for item in res:
                writer.writerow(item)

    @classmethod
    def load_from_file_csv(cls):
        filename = ''.join([cls.__name__, '.csv'])
        try:
            with open(filename, encoding='utf-8', mode='r') as file:
                reader = csv.reader(file)
                instances = []
                for row in reader:
                    if cls.__name__ == 'Rectangle':
                        obj = cls(0, 0, 0, 0)
                    elif cls.__name__ == 'Square':
                        obj = cls(0, 0, 0)
                    obj.from_csv(row)
                    instances.append(obj)
                return instances
        except FileNotFoundError:
            return []

    @staticmethod
    def draw(list_rectangles, list_squares):
        # Create a turtle screen and set up settings
        screen = turtle.Screen()
        screen.setup(width=800, height=600)
        screen.title("Drawing Rectangles and Squares")

        # Create a turtle object for drawing
        drawing_turtle = turtle.Turtle()
        drawing_turtle.speed(0)  # Set the drawing speed (0 is fastest)

        # Define a function to draw a rectangle
        def draw_rectangle(rectangle):
            drawing_turtle.penup()
            drawing_turtle.goto(rectangle.x - rectangle.width / 2, rectangle.y - rectangle.height / 2)
            drawing_turtle.pendown()
            drawing_turtle.color("blue")  # You can set your desired color
            drawing_turtle.begin_fill()
            for _ in range(4):
                drawing_turtle.forward(rectangle.width)
                drawing_turtle.left(90)
            drawing_turtle.end_fill()

        # Define a function to draw a square
        def draw_square(square):
            drawing_turtle.penup()
            drawing_turtle.goto(square.x - square.size / 2, square.y - square.size / 2)
            drawing_turtle.pendown()
            drawing_turtle.color("red")  # You can set your desired color
            drawing_turtle.begin_fill()
            for _ in range(4):
                drawing_turtle.forward(square.size)
                drawing_turtle.left(90)
            drawing_turtle.end_fill()

        # Draw Rectangles
        for rectangle in list_rectangles:
            draw_rectangle(rectangle)

        # Draw Squares
        for square in list_squares:
            draw_square(square)

        # Close the window when clicked
        screen.exitonclick()
